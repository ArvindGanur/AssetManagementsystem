// <auto-generated />
using System;
using AssetManagementSystemFidrox.AssetDbContextEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AssetManagementSystemFidrox.Migrations
{
    [DbContext(typeof(AssetDbContext))]
    partial class AssetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AssetManagementSystemFidrox.Models.AssetDetails", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Asset_Bag_Name")
                        .HasMaxLength(50);

                    b.Property<string>("Asset_Charger");

                    b.Property<string>("Asset_HardDisk_GB")
                        .IsRequired();

                    b.Property<string>("Asset_LicenseKey")
                        .HasMaxLength(50);

                    b.Property<string>("Asset_Mouse");

                    b.Property<string>("Asset_No")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Asset_OS");

                    b.Property<string>("Asset_Ram_GB")
                        .IsRequired();

                    b.Property<string>("Asset_Remarks")
                        .HasMaxLength(250);

                    b.Property<string>("Asset_Status");

                    b.Property<string>("Asset_accessories")
                        .HasMaxLength(150);

                    b.Property<string>("Asset_graphics_crd_GB");

                    b.Property<string>("Asset_model_no")
                        .HasMaxLength(50);

                    b.Property<string>("Asset_name")
                        .HasMaxLength(50);

                    b.Property<string>("Asset_price")
                        .HasMaxLength(50);

                    b.Property<string>("Asset_puch_place")
                        .HasMaxLength(50);

                    b.Property<string>("Asset_purchase_bill_no")
                        .HasMaxLength(50);

                    b.Property<string>("Asset_purchase_dt");

                    b.Property<string>("Asset_type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AstProcessor")
                        .HasMaxLength(50);

                    b.Property<int?>("graphicsCardGraphics_CardId");

                    b.Property<int?>("hardDiskModelHard_DiskId");

                    b.Property<int?>("itemsBrandbrandsId");

                    b.Property<int?>("ramModelRAM_ID");

                    b.HasKey("AssetId");

                    b.HasIndex("graphicsCardGraphics_CardId");

                    b.HasIndex("hardDiskModelHard_DiskId");

                    b.HasIndex("itemsBrandbrandsId");

                    b.HasIndex("ramModelRAM_ID");

                    b.ToTable("AssetDetails");
                });

            modelBuilder.Entity("AssetManagementSystemFidrox.Models.AssetIssueDetails", b =>
                {
                    b.Property<int>("IssueID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fdx_Asset_Model_name")
                        .HasMaxLength(150);

                    b.Property<string>("Fdx_Asset_New_Old");

                    b.Property<string>("Fdx_Asset_Remarks")
                        .HasMaxLength(250);

                    b.Property<string>("Fdx_Asset_Status")
                        .HasMaxLength(10);

                    b.Property<string>("Fdx_Asset_issued_dt")
                        .IsRequired();

                    b.Property<string>("Fdx_Asset_no")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Fdx_Asset_return_dt");

                    b.Property<string>("Fdx_Emp_Acknowledge")
                        .IsRequired();

                    b.Property<string>("Fdx_Emp_Designation")
                        .HasMaxLength(50);

                    b.Property<string>("Fdx_Emp_EmailId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Fdx_Emp_Id");

                    b.Property<string>("Fdx_Emp_Name")
                        .HasMaxLength(50);

                    b.Property<string>("Fdx_Emp_Recived_item");

                    b.Property<string>("Fdx_Emp_Replace_Item");

                    b.Property<string>("Fdx_Emp_wrk_loc");

                    b.Property<int?>("assetDetailsAssetId");

                    b.HasKey("IssueID");

                    b.HasIndex("assetDetailsAssetId");

                    b.ToTable("AssetIssueDetails");
                });

            modelBuilder.Entity("AssetManagementSystemFidrox.Models.GraphicsCardModel", b =>
                {
                    b.Property<int>("Graphics_CardId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Graphics_Card_GC");

                    b.HasKey("Graphics_CardId");

                    b.ToTable("GraphicsCardModels");
                });

            modelBuilder.Entity("AssetManagementSystemFidrox.Models.HardDiskModel", b =>
                {
                    b.Property<int>("Hard_DiskId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Hard_Disk_HD");

                    b.HasKey("Hard_DiskId");

                    b.ToTable("HardDiskModels");
                });

            modelBuilder.Entity("AssetManagementSystemFidrox.Models.ItemsBrand", b =>
                {
                    b.Property<int>("brandsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("brands_Name");

                    b.HasKey("brandsId");

                    b.ToTable("ItemsBrands");
                });

            modelBuilder.Entity("AssetManagementSystemFidrox.Models.OperatingSystemModel", b =>
                {
                    b.Property<int>("OSId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Operating_System");

                    b.HasKey("OSId");

                    b.ToTable("OperatingSystemModels");
                });

            modelBuilder.Entity("AssetManagementSystemFidrox.Models.RamModel", b =>
                {
                    b.Property<int>("RAM_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RAM");

                    b.HasKey("RAM_ID");

                    b.ToTable("RamModels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AssetManagementSystemFidrox.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LasrName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(12);

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("AssetManagementSystemFidrox.Models.AssetDetails", b =>
                {
                    b.HasOne("AssetManagementSystemFidrox.Models.GraphicsCardModel", "graphicsCard")
                        .WithMany()
                        .HasForeignKey("graphicsCardGraphics_CardId");

                    b.HasOne("AssetManagementSystemFidrox.Models.HardDiskModel", "hardDiskModel")
                        .WithMany()
                        .HasForeignKey("hardDiskModelHard_DiskId");

                    b.HasOne("AssetManagementSystemFidrox.Models.ItemsBrand", "itemsBrand")
                        .WithMany()
                        .HasForeignKey("itemsBrandbrandsId");

                    b.HasOne("AssetManagementSystemFidrox.Models.RamModel", "ramModel")
                        .WithMany()
                        .HasForeignKey("ramModelRAM_ID");
                });

            modelBuilder.Entity("AssetManagementSystemFidrox.Models.AssetIssueDetails", b =>
                {
                    b.HasOne("AssetManagementSystemFidrox.Models.AssetDetails", "assetDetails")
                        .WithMany()
                        .HasForeignKey("assetDetailsAssetId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
